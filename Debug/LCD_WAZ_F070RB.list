
LCD_WAZ_F070RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000d14  08000d14  00010d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000d24  08000d24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d28  08000d28  00010d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08000d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000094  20000018  08000d44  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200000ac  08000d44  000200ac  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003540  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000cd2  00000000  00000000  00023580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000220  00000000  00000000  00024258  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00024478  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001329  00000000  00000000  00024610  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000fe9  00000000  00000000  00025939  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00026922  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000574  00000000  00000000  000269a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00026f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000cfc 	.word	0x08000cfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08000cfc 	.word	0x08000cfc

08000108 <lcd_send_half>:
uint32_t lcd_write_cmd(struct lcd_port_init *lcd, uint8_t data);
void lcd_send_half(struct lcd_port_init *lcd, uint8_t bits);

void
lcd_send_half(struct lcd_port_init *lcd, uint8_t bits)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
 8000110:	000a      	movs	r2, r1
 8000112:	1cfb      	adds	r3, r7, #3
 8000114:	701a      	strb	r2, [r3, #0]
  if(bits & 0x01) {
 8000116:	1cfb      	adds	r3, r7, #3
 8000118:	781b      	ldrb	r3, [r3, #0]
 800011a:	2201      	movs	r2, #1
 800011c:	4013      	ands	r3, r2
 800011e:	d00c      	beq.n	800013a <lcd_send_half+0x32>
    lcd->DB4_PORT->ODR |= (1U << lcd->LCD_PIN.DB4);
 8000120:	687b      	ldr	r3, [r7, #4]
 8000122:	695b      	ldr	r3, [r3, #20]
 8000124:	687a      	ldr	r2, [r7, #4]
 8000126:	6952      	ldr	r2, [r2, #20]
 8000128:	6951      	ldr	r1, [r2, #20]
 800012a:	687a      	ldr	r2, [r7, #4]
 800012c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800012e:	2001      	movs	r0, #1
 8000130:	4090      	lsls	r0, r2
 8000132:	0002      	movs	r2, r0
 8000134:	430a      	orrs	r2, r1
 8000136:	615a      	str	r2, [r3, #20]
 8000138:	e00c      	b.n	8000154 <lcd_send_half+0x4c>
  }else {
    lcd->DB4_PORT->ODR &= ~(1U << lcd->LCD_PIN.DB4);
 800013a:	687b      	ldr	r3, [r7, #4]
 800013c:	695b      	ldr	r3, [r3, #20]
 800013e:	687a      	ldr	r2, [r7, #4]
 8000140:	6952      	ldr	r2, [r2, #20]
 8000142:	6951      	ldr	r1, [r2, #20]
 8000144:	687a      	ldr	r2, [r7, #4]
 8000146:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000148:	2001      	movs	r0, #1
 800014a:	4090      	lsls	r0, r2
 800014c:	0002      	movs	r2, r0
 800014e:	43d2      	mvns	r2, r2
 8000150:	400a      	ands	r2, r1
 8000152:	615a      	str	r2, [r3, #20]
  }

  if(bits & 0x02) {
 8000154:	1cfb      	adds	r3, r7, #3
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	2202      	movs	r2, #2
 800015a:	4013      	ands	r3, r2
 800015c:	d00c      	beq.n	8000178 <lcd_send_half+0x70>
    lcd->DB5_PORT->ODR |= (1U << lcd->LCD_PIN.DB5);
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	691b      	ldr	r3, [r3, #16]
 8000162:	687a      	ldr	r2, [r7, #4]
 8000164:	6912      	ldr	r2, [r2, #16]
 8000166:	6951      	ldr	r1, [r2, #20]
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800016c:	2001      	movs	r0, #1
 800016e:	4090      	lsls	r0, r2
 8000170:	0002      	movs	r2, r0
 8000172:	430a      	orrs	r2, r1
 8000174:	615a      	str	r2, [r3, #20]
 8000176:	e00c      	b.n	8000192 <lcd_send_half+0x8a>
  }else {
    lcd->DB5_PORT->ODR &= ~(1U << lcd->LCD_PIN.DB5);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	691b      	ldr	r3, [r3, #16]
 800017c:	687a      	ldr	r2, [r7, #4]
 800017e:	6912      	ldr	r2, [r2, #16]
 8000180:	6951      	ldr	r1, [r2, #20]
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000186:	2001      	movs	r0, #1
 8000188:	4090      	lsls	r0, r2
 800018a:	0002      	movs	r2, r0
 800018c:	43d2      	mvns	r2, r2
 800018e:	400a      	ands	r2, r1
 8000190:	615a      	str	r2, [r3, #20]
  }

  if(bits & 0x04) {
 8000192:	1cfb      	adds	r3, r7, #3
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	2204      	movs	r2, #4
 8000198:	4013      	ands	r3, r2
 800019a:	d00c      	beq.n	80001b6 <lcd_send_half+0xae>
    lcd->DB6_PORT->ODR |= (1U << lcd->LCD_PIN.DB6);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	68db      	ldr	r3, [r3, #12]
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	68d2      	ldr	r2, [r2, #12]
 80001a4:	6951      	ldr	r1, [r2, #20]
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80001aa:	2001      	movs	r0, #1
 80001ac:	4090      	lsls	r0, r2
 80001ae:	0002      	movs	r2, r0
 80001b0:	430a      	orrs	r2, r1
 80001b2:	615a      	str	r2, [r3, #20]
 80001b4:	e00c      	b.n	80001d0 <lcd_send_half+0xc8>
  }else {
    lcd->DB6_PORT->ODR &= ~(1U << lcd->LCD_PIN.DB6);
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	68db      	ldr	r3, [r3, #12]
 80001ba:	687a      	ldr	r2, [r7, #4]
 80001bc:	68d2      	ldr	r2, [r2, #12]
 80001be:	6951      	ldr	r1, [r2, #20]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80001c4:	2001      	movs	r0, #1
 80001c6:	4090      	lsls	r0, r2
 80001c8:	0002      	movs	r2, r0
 80001ca:	43d2      	mvns	r2, r2
 80001cc:	400a      	ands	r2, r1
 80001ce:	615a      	str	r2, [r3, #20]
  }

  if(bits & 0x08) {
 80001d0:	1cfb      	adds	r3, r7, #3
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2208      	movs	r2, #8
 80001d6:	4013      	ands	r3, r2
 80001d8:	d00c      	beq.n	80001f4 <lcd_send_half+0xec>
    lcd->DB7_PORT->ODR |= (1U << lcd->LCD_PIN.DB7);
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	689b      	ldr	r3, [r3, #8]
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	6892      	ldr	r2, [r2, #8]
 80001e2:	6951      	ldr	r1, [r2, #20]
 80001e4:	687a      	ldr	r2, [r7, #4]
 80001e6:	6a12      	ldr	r2, [r2, #32]
 80001e8:	2001      	movs	r0, #1
 80001ea:	4090      	lsls	r0, r2
 80001ec:	0002      	movs	r2, r0
 80001ee:	430a      	orrs	r2, r1
 80001f0:	615a      	str	r2, [r3, #20]
  }else {
    lcd->DB7_PORT->ODR &= ~(1U << lcd->LCD_PIN.DB7);
  }
}
 80001f2:	e00c      	b.n	800020e <lcd_send_half+0x106>
    lcd->DB7_PORT->ODR &= ~(1U << lcd->LCD_PIN.DB7);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	689b      	ldr	r3, [r3, #8]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	6892      	ldr	r2, [r2, #8]
 80001fc:	6951      	ldr	r1, [r2, #20]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	6a12      	ldr	r2, [r2, #32]
 8000202:	2001      	movs	r0, #1
 8000204:	4090      	lsls	r0, r2
 8000206:	0002      	movs	r2, r0
 8000208:	43d2      	mvns	r2, r2
 800020a:	400a      	ands	r2, r1
 800020c:	615a      	str	r2, [r3, #20]
}
 800020e:	46c0      	nop			; (mov r8, r8)
 8000210:	46bd      	mov	sp, r7
 8000212:	b002      	add	sp, #8
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <lcd_write>:

uint32_t
lcd_write(struct lcd_port_init *lcd, uint8_t data)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	000a      	movs	r2, r1
 8000222:	1cfb      	adds	r3, r7, #3
 8000224:	701a      	strb	r2, [r3, #0]
  uint32_t retval = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  static uint32_t lcd_driver_state = LCD_STATE_WRITE;
  static uint32_t lcd_tick_ms = 0;

  switch (lcd_driver_state) {
 800022a:	4b38      	ldr	r3, [pc, #224]	; (800030c <lcd_write+0xf4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d052      	beq.n	80002d8 <lcd_write+0xc0>
 8000232:	d302      	bcc.n	800023a <lcd_write+0x22>
 8000234:	2b02      	cmp	r3, #2
 8000236:	d05e      	beq.n	80002f6 <lcd_write+0xde>
 8000238:	e063      	b.n	8000302 <lcd_write+0xea>
    case LCD_STATE_WRITE: {
      //set E
      lcd->E_PORT->ODR |= (1U << lcd->LCD_PIN.E);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	6852      	ldr	r2, [r2, #4]
 8000242:	6951      	ldr	r1, [r2, #20]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	69d2      	ldr	r2, [r2, #28]
 8000248:	2001      	movs	r0, #1
 800024a:	4090      	lsls	r0, r2
 800024c:	0002      	movs	r2, r0
 800024e:	430a      	orrs	r2, r1
 8000250:	615a      	str	r2, [r3, #20]
      lcd_send_half(lcd ,data >> 4);
 8000252:	1cfb      	adds	r3, r7, #3
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	091b      	lsrs	r3, r3, #4
 8000258:	b2da      	uxtb	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	0011      	movs	r1, r2
 800025e:	0018      	movs	r0, r3
 8000260:	f7ff ff52 	bl	8000108 <lcd_send_half>
      //disable E
      lcd->E_PORT->ODR &= ~(1U << lcd->LCD_PIN.E);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	6852      	ldr	r2, [r2, #4]
 800026c:	6951      	ldr	r1, [r2, #20]
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	69d2      	ldr	r2, [r2, #28]
 8000272:	2001      	movs	r0, #1
 8000274:	4090      	lsls	r0, r2
 8000276:	0002      	movs	r2, r0
 8000278:	43d2      	mvns	r2, r2
 800027a:	400a      	ands	r2, r1
 800027c:	615a      	str	r2, [r3, #20]
      //set E
      lcd->E_PORT->ODR |= (1U << lcd->LCD_PIN.E);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	6852      	ldr	r2, [r2, #4]
 8000286:	6951      	ldr	r1, [r2, #20]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	69d2      	ldr	r2, [r2, #28]
 800028c:	2001      	movs	r0, #1
 800028e:	4090      	lsls	r0, r2
 8000290:	0002      	movs	r2, r0
 8000292:	430a      	orrs	r2, r1
 8000294:	615a      	str	r2, [r3, #20]
      lcd_send_half(lcd, data);
 8000296:	1cfb      	adds	r3, r7, #3
 8000298:	781a      	ldrb	r2, [r3, #0]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	0011      	movs	r1, r2
 800029e:	0018      	movs	r0, r3
 80002a0:	f7ff ff32 	bl	8000108 <lcd_send_half>
      lcd->E_PORT->ODR &= ~(1U << lcd->LCD_PIN.E);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	6852      	ldr	r2, [r2, #4]
 80002ac:	6951      	ldr	r1, [r2, #20]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	69d2      	ldr	r2, [r2, #28]
 80002b2:	2001      	movs	r0, #1
 80002b4:	4090      	lsls	r0, r2
 80002b6:	0002      	movs	r2, r0
 80002b8:	43d2      	mvns	r2, r2
 80002ba:	400a      	ands	r2, r1
 80002bc:	615a      	str	r2, [r3, #20]
      lcd_tick_ms = get_system_tick_ms() + 2;
 80002be:	f000 fc49 	bl	8000b54 <get_system_tick_ms>
 80002c2:	0003      	movs	r3, r0
 80002c4:	1c9a      	adds	r2, r3, #2
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <lcd_write+0xf8>)
 80002c8:	601a      	str	r2, [r3, #0]
      lcd_driver_state = LCD_STATE_WAIT;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <lcd_write+0xf4>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	601a      	str	r2, [r3, #0]
      retval = lcd_driver_state;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <lcd_write+0xf4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	60fb      	str	r3, [r7, #12]
    }
    break;
 80002d6:	e014      	b.n	8000302 <lcd_write+0xea>

    case LCD_STATE_WAIT: {
      uint32_t tick = get_system_tick_ms();
 80002d8:	f000 fc3c 	bl	8000b54 <get_system_tick_ms>
 80002dc:	0003      	movs	r3, r0
 80002de:	60bb      	str	r3, [r7, #8]
      if (tick > lcd_tick_ms){
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <lcd_write+0xf8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d902      	bls.n	80002f0 <lcd_write+0xd8>
	lcd_driver_state = LCD_STATE_END;
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <lcd_write+0xf4>)
 80002ec:	2202      	movs	r2, #2
 80002ee:	601a      	str	r2, [r3, #0]
      }
      retval = LCD_STATE_WAIT;
 80002f0:	2301      	movs	r3, #1
 80002f2:	60fb      	str	r3, [r7, #12]
    }
    break;
 80002f4:	e005      	b.n	8000302 <lcd_write+0xea>

    case LCD_STATE_END:	{
      lcd_driver_state = LCD_STATE_WRITE;
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <lcd_write+0xf4>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
      retval = LCD_STATE_END;
 80002fc:	2302      	movs	r3, #2
 80002fe:	60fb      	str	r3, [r7, #12]
    }
    break;
 8000300:	46c0      	nop			; (mov r8, r8)
  }

  return retval;
 8000302:	68fb      	ldr	r3, [r7, #12]
}
 8000304:	0018      	movs	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	b004      	add	sp, #16
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000034 	.word	0x20000034
 8000310:	20000038 	.word	0x20000038

08000314 <lcd_write_data>:

uint32_t
lcd_write_data(struct lcd_port_init *lcd, uint8_t data)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	000a      	movs	r2, r1
 800031e:	1cfb      	adds	r3, r7, #3
 8000320:	701a      	strb	r2, [r3, #0]
  uint32_t retval = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
  //set RS
  lcd->RS_PORT->ODR |= lcd->LCD_PIN.RS;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6812      	ldr	r2, [r2, #0]
 800032e:	6951      	ldr	r1, [r2, #20]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	6992      	ldr	r2, [r2, #24]
 8000334:	430a      	orrs	r2, r1
 8000336:	615a      	str	r2, [r3, #20]
  while((lcd_write(lcd, data)) != 2);
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	1cfb      	adds	r3, r7, #3
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	0011      	movs	r1, r2
 8000342:	0018      	movs	r0, r3
 8000344:	f7ff ff68 	bl	8000218 <lcd_write>
 8000348:	0003      	movs	r3, r0
 800034a:	2b02      	cmp	r3, #2
 800034c:	d1f5      	bne.n	800033a <lcd_write_data+0x26>
  return retval;
 800034e:	68fb      	ldr	r3, [r7, #12]
}
 8000350:	0018      	movs	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	b004      	add	sp, #16
 8000356:	bd80      	pop	{r7, pc}

08000358 <lcd_write_cmd>:

uint32_t
lcd_write_cmd(struct lcd_port_init *lcd, uint8_t cmd)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	000a      	movs	r2, r1
 8000362:	1cfb      	adds	r3, r7, #3
 8000364:	701a      	strb	r2, [r3, #0]
  uint32_t retval = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  lcd->RS_PORT->ODR &= ~lcd->LCD_PIN.RS;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	6951      	ldr	r1, [r2, #20]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	6992      	ldr	r2, [r2, #24]
 8000378:	43d2      	mvns	r2, r2
 800037a:	400a      	ands	r2, r1
 800037c:	615a      	str	r2, [r3, #20]
  lcd_write(lcd, cmd);
 800037e:	1cfb      	adds	r3, r7, #3
 8000380:	781a      	ldrb	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	0011      	movs	r1, r2
 8000386:	0018      	movs	r0, r3
 8000388:	f7ff ff46 	bl	8000218 <lcd_write>
  while((lcd_write(lcd, cmd)) != 2);
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	1cfb      	adds	r3, r7, #3
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	0011      	movs	r1, r2
 8000396:	0018      	movs	r0, r3
 8000398:	f7ff ff3e 	bl	8000218 <lcd_write>
 800039c:	0003      	movs	r3, r0
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d1f5      	bne.n	800038e <lcd_write_cmd+0x36>
  return retval;
 80003a2:	68fb      	ldr	r3, [r7, #12]
}
 80003a4:	0018      	movs	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b004      	add	sp, #16
 80003aa:	bd80      	pop	{r7, pc}

080003ac <lcd_init>:

int32_t
lcd_init(struct lcd_port_init *lcd)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  uint32_t bit_pos = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]
  uint32_t set_moder = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]

  bit_pos = lcd->LCD_PIN.RS;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	613b      	str	r3, [r7, #16]
  bit_pos = bit_pos*2;
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	613b      	str	r3, [r7, #16]
  set_moder = (1U << bit_pos);
 80003c8:	2201      	movs	r2, #1
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0013      	movs	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
  lcd->RS_PORT->MODER	|= set_moder;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	6811      	ldr	r1, [r2, #0]
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	430a      	orrs	r2, r1
 80003e0:	601a      	str	r2, [r3, #0]

  bit_pos = lcd->LCD_PIN.E;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	613b      	str	r3, [r7, #16]
  bit_pos = bit_pos*2;
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	613b      	str	r3, [r7, #16]
  set_moder = (1U << bit_pos);
 80003ee:	2201      	movs	r2, #1
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	409a      	lsls	r2, r3
 80003f4:	0013      	movs	r3, r2
 80003f6:	60fb      	str	r3, [r7, #12]
  lcd->E_PORT->MODER	|= set_moder;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	6852      	ldr	r2, [r2, #4]
 8000400:	6811      	ldr	r1, [r2, #0]
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	430a      	orrs	r2, r1
 8000406:	601a      	str	r2, [r3, #0]

  bit_pos = lcd->LCD_PIN.DB4;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040c:	613b      	str	r3, [r7, #16]
  bit_pos = bit_pos*2;
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	613b      	str	r3, [r7, #16]
  set_moder = (1U << bit_pos);
 8000414:	2201      	movs	r2, #1
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	409a      	lsls	r2, r3
 800041a:	0013      	movs	r3, r2
 800041c:	60fb      	str	r3, [r7, #12]
  lcd->DB4_PORT->MODER 	|= set_moder;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	6952      	ldr	r2, [r2, #20]
 8000426:	6811      	ldr	r1, [r2, #0]
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	430a      	orrs	r2, r1
 800042c:	601a      	str	r2, [r3, #0]

  bit_pos = lcd->LCD_PIN.DB5;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000432:	613b      	str	r3, [r7, #16]
  bit_pos = bit_pos*2;
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	613b      	str	r3, [r7, #16]
  set_moder = (1U << bit_pos);
 800043a:	2201      	movs	r2, #1
 800043c:	693b      	ldr	r3, [r7, #16]
 800043e:	409a      	lsls	r2, r3
 8000440:	0013      	movs	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
  lcd->DB5_PORT->MODER 	|= set_moder;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	691b      	ldr	r3, [r3, #16]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	6912      	ldr	r2, [r2, #16]
 800044c:	6811      	ldr	r1, [r2, #0]
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	430a      	orrs	r2, r1
 8000452:	601a      	str	r2, [r3, #0]

  bit_pos = lcd->LCD_PIN.DB6;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000458:	613b      	str	r3, [r7, #16]
  bit_pos = bit_pos*2;
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	613b      	str	r3, [r7, #16]
  set_moder = (1U << bit_pos);
 8000460:	2201      	movs	r2, #1
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	409a      	lsls	r2, r3
 8000466:	0013      	movs	r3, r2
 8000468:	60fb      	str	r3, [r7, #12]
  lcd->DB6_PORT->MODER 	|= set_moder;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	68d2      	ldr	r2, [r2, #12]
 8000472:	6811      	ldr	r1, [r2, #0]
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	430a      	orrs	r2, r1
 8000478:	601a      	str	r2, [r3, #0]

  bit_pos = lcd->LCD_PIN.DB7;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6a1b      	ldr	r3, [r3, #32]
 800047e:	613b      	str	r3, [r7, #16]
  bit_pos = bit_pos*2;
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	613b      	str	r3, [r7, #16]
  set_moder = (1U << bit_pos);
 8000486:	2201      	movs	r2, #1
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	409a      	lsls	r2, r3
 800048c:	0013      	movs	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
  lcd->DB7_PORT->MODER 	|= set_moder;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	6892      	ldr	r2, [r2, #8]
 8000498:	6811      	ldr	r1, [r2, #0]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	430a      	orrs	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
  system_delay_ms(15);
 80004a0:	200f      	movs	r0, #15
 80004a2:	f000 fb3f 	bl	8000b24 <system_delay_ms>

  lcd->RS_PORT->ODR &= ~(1U << lcd->LCD_PIN.RS);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	6812      	ldr	r2, [r2, #0]
 80004ae:	6951      	ldr	r1, [r2, #20]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	6992      	ldr	r2, [r2, #24]
 80004b4:	2001      	movs	r0, #1
 80004b6:	4090      	lsls	r0, r2
 80004b8:	0002      	movs	r2, r0
 80004ba:	43d2      	mvns	r2, r2
 80004bc:	400a      	ands	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
  lcd->E_PORT->ODR &= ~(1U << lcd->LCD_PIN.E);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	6852      	ldr	r2, [r2, #4]
 80004c8:	6951      	ldr	r1, [r2, #20]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	69d2      	ldr	r2, [r2, #28]
 80004ce:	2001      	movs	r0, #1
 80004d0:	4090      	lsls	r0, r2
 80004d2:	0002      	movs	r2, r0
 80004d4:	43d2      	mvns	r2, r2
 80004d6:	400a      	ands	r2, r1
 80004d8:	615a      	str	r2, [r3, #20]

  for(uint32_t i = 0; i < 3; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	e023      	b.n	8000528 <lcd_init+0x17c>
    lcd->E_PORT->ODR |= (1U << lcd->LCD_PIN.E);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	6852      	ldr	r2, [r2, #4]
 80004e8:	6951      	ldr	r1, [r2, #20]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	69d2      	ldr	r2, [r2, #28]
 80004ee:	2001      	movs	r0, #1
 80004f0:	4090      	lsls	r0, r2
 80004f2:	0002      	movs	r2, r0
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
    lcd_send_half(lcd, 0x03);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2103      	movs	r1, #3
 80004fc:	0018      	movs	r0, r3
 80004fe:	f7ff fe03 	bl	8000108 <lcd_send_half>
    lcd->E_PORT->ODR &= ~(1U << lcd->LCD_PIN.E);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	6852      	ldr	r2, [r2, #4]
 800050a:	6951      	ldr	r1, [r2, #20]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	69d2      	ldr	r2, [r2, #28]
 8000510:	2001      	movs	r0, #1
 8000512:	4090      	lsls	r0, r2
 8000514:	0002      	movs	r2, r0
 8000516:	43d2      	mvns	r2, r2
 8000518:	400a      	ands	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
    system_delay_ms(5);
 800051c:	2005      	movs	r0, #5
 800051e:	f000 fb01 	bl	8000b24 <system_delay_ms>
  for(uint32_t i = 0; i < 3; i++) {
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d9d8      	bls.n	80004e0 <lcd_init+0x134>
  }

  lcd->E_PORT->ODR |= (1U << lcd->LCD_PIN.E);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	6852      	ldr	r2, [r2, #4]
 8000536:	6951      	ldr	r1, [r2, #20]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	69d2      	ldr	r2, [r2, #28]
 800053c:	2001      	movs	r0, #1
 800053e:	4090      	lsls	r0, r2
 8000540:	0002      	movs	r2, r0
 8000542:	430a      	orrs	r2, r1
 8000544:	615a      	str	r2, [r3, #20]
  lcd_send_half(lcd, 0x02);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2102      	movs	r1, #2
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff fddc 	bl	8000108 <lcd_send_half>
  lcd->E_PORT->ODR &= ~(1U << lcd->LCD_PIN.E);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	6852      	ldr	r2, [r2, #4]
 8000558:	6951      	ldr	r1, [r2, #20]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	69d2      	ldr	r2, [r2, #28]
 800055e:	2001      	movs	r0, #1
 8000560:	4090      	lsls	r0, r2
 8000562:	0002      	movs	r2, r0
 8000564:	43d2      	mvns	r2, r2
 8000566:	400a      	ands	r2, r1
 8000568:	615a      	str	r2, [r3, #20]
  system_delay_ms(1);
 800056a:	2001      	movs	r0, #1
 800056c:	f000 fada 	bl	8000b24 <system_delay_ms>

  lcd_write_cmd(lcd, (KS0070B_FUNCTION_SET | KS0070B_FONT5x10 | KS0070B_TWO_LINE | KS0070B_4_BIT) ); //interface 4bits, 2-lines, sign 5x7
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	212c      	movs	r1, #44	; 0x2c
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff feef 	bl	8000358 <lcd_write_cmd>
  lcd_write_cmd(lcd, (KS0070B_DISPLAY_ONOFF | KS0070B_DISPLAY_OFF));
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2108      	movs	r1, #8
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff feea 	bl	8000358 <lcd_write_cmd>
  lcd_write_cmd(lcd, KS0070B_CLEAR); // clear DDR
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2101      	movs	r1, #1
 8000588:	0018      	movs	r0, r3
 800058a:	f7ff fee5 	bl	8000358 <lcd_write_cmd>
  system_delay_ms(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f000 fac8 	bl	8000b24 <system_delay_ms>

  lcd_write_cmd(lcd, (KS0070B_ENTRY_MODE | KS0070B_EM_SHIFT_CURSOR | KS0070B_EM_INCREMENT) );// inkrementaja adresu i przesuwanie kursora
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2106      	movs	r1, #6
 8000598:	0018      	movs	r0, r3
 800059a:	f7ff fedd 	bl	8000358 <lcd_write_cmd>
  lcd_write_cmd(lcd, (KS0070B_DISPLAY_ONOFF | KS0070B_DISPLAY_ON | KS0070B_CURSOR_ON | KS0070B_CURSOR_BLINK) ); // w³¹cz LCD, bez kursora i mrugania
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	210f      	movs	r1, #15
 80005a2:	0018      	movs	r0, r3
 80005a4:	f7ff fed8 	bl	8000358 <lcd_write_cmd>
  system_delay_ms(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fabb 	bl	8000b24 <system_delay_ms>

  return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	0018      	movs	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b006      	add	sp, #24
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <lcd_goto>:

void
lcd_goto(struct lcd_port_init *lcd, uint32_t lcd_y, uint32_t lcd_x)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  switch(lcd_y) {
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d011      	beq.n	80005ee <lcd_goto+0x36>
 80005ca:	d304      	bcc.n	80005d6 <lcd_goto+0x1e>
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d01c      	beq.n	800060a <lcd_goto+0x52>
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d028      	beq.n	8000626 <lcd_goto+0x6e>

    case 3:
      lcd_write_cmd(lcd, (KS0070B_DDRAM_SET | (0x54+lcd_x)));
    break;
  }
}
 80005d4:	e035      	b.n	8000642 <lcd_goto+0x8a>
      lcd_write_cmd(lcd, (KS0070B_DDRAM_SET | lcd_x));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	4252      	negs	r2, r2
 80005de:	4313      	orrs	r3, r2
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff feb6 	bl	8000358 <lcd_write_cmd>
    break;
 80005ec:	e029      	b.n	8000642 <lcd_goto+0x8a>
      lcd_write_cmd(lcd, (KS0070B_DDRAM_SET | (0x40+lcd_x)));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	3340      	adds	r3, #64	; 0x40
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	4252      	negs	r2, r2
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	0011      	movs	r1, r2
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff fea8 	bl	8000358 <lcd_write_cmd>
    break;
 8000608:	e01b      	b.n	8000642 <lcd_goto+0x8a>
      lcd_write_cmd(lcd, (KS0070B_DDRAM_SET | (0x14+lcd_x)));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	3314      	adds	r3, #20
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	4252      	negs	r2, r2
 8000616:	4313      	orrs	r3, r2
 8000618:	b2da      	uxtb	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fe9a 	bl	8000358 <lcd_write_cmd>
    break;
 8000624:	e00d      	b.n	8000642 <lcd_goto+0x8a>
      lcd_write_cmd(lcd, (KS0070B_DDRAM_SET | (0x54+lcd_x)));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3354      	adds	r3, #84	; 0x54
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	4252      	negs	r2, r2
 8000632:	4313      	orrs	r3, r2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff fe8c 	bl	8000358 <lcd_write_cmd>
    break;
 8000640:	46c0      	nop			; (mov r8, r8)
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b004      	add	sp, #16
 8000648:	bd80      	pop	{r7, pc}

0800064a <lcd_show_text>:

void
lcd_show_text(struct lcd_port_init *lcd,char *text)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
  while(*text) {
 8000654:	e008      	b.n	8000668 <lcd_show_text+0x1e>
    lcd_write_data(lcd, *text++);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	603a      	str	r2, [r7, #0]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fe56 	bl	8000314 <lcd_write_data>
  while(*text) {
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1f2      	bne.n	8000656 <lcd_show_text+0xc>
  }
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b002      	add	sp, #8
 8000676:	bd80      	pop	{r7, pc}

08000678 <uart2_put_char>:
 *  buffed functions
 */

int32_t
uart2_put_char(char data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	0002      	movs	r2, r0
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	701a      	strb	r2, [r3, #0]
  uint8_t head_temp = tx_rbuff.head + 1;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <uart2_put_char+0x70>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	230f      	movs	r3, #15
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	3201      	adds	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]

  if (head_temp == TX_BUFF_SIZE) {
 8000692:	230f      	movs	r3, #15
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b14      	cmp	r3, #20
 800069a:	d103      	bne.n	80006a4 <uart2_put_char+0x2c>
    head_temp = 0;
 800069c:	230f      	movs	r3, #15
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
  }
  while (head_temp == tx_rbuff.tail) {
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	230f      	movs	r3, #15
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <uart2_put_char+0x70>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d0f8      	beq.n	80006a6 <uart2_put_char+0x2e>

  }

  tx_rbuff.buffer[head_temp] = data;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <uart2_put_char+0x70>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	18d3      	adds	r3, r2, r3
 80006c0:	1dfa      	adds	r2, r7, #7
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	701a      	strb	r2, [r3, #0]
  tx_rbuff.head = head_temp;
 80006c6:	230f      	movs	r3, #15
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <uart2_put_char+0x70>)
 80006ce:	605a      	str	r2, [r3, #4]

  /* TX IT enable */
  USART2->CR1 |= USART_CR1_TXEIE;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <uart2_put_char+0x74>)
 80006d2:	4a06      	ldr	r2, [pc, #24]	; (80006ec <uart2_put_char+0x74>)
 80006d4:	6812      	ldr	r2, [r2, #0]
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	430a      	orrs	r2, r1
 80006da:	601a      	str	r2, [r3, #0]

  return 0;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	0018      	movs	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b004      	add	sp, #16
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	40004400 	.word	0x40004400

080006f0 <uart2_put_string>:
  return 0;
}

void
uart2_put_string( char *s)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  while(*s) {
 80006f8:	e006      	b.n	8000708 <uart2_put_string+0x18>
    uart2_put_char(*s++);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	0018      	movs	r0, r3
 8000704:	f7ff ffb8 	bl	8000678 <uart2_put_char>
  while(*s) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f4      	bne.n	80006fa <uart2_put_string+0xa>
  }
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bd80      	pop	{r7, pc}

08000718 <USART2_IRQHandler>:

/* INTERUPTS */
void
USART2_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  /* odbior */
  if ( USART2->ISR & USART_ISR_RXNE) {
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <USART2_IRQHandler+0xac>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	2220      	movs	r2, #32
 8000724:	4013      	ands	r3, r2
 8000726:	d020      	beq.n	800076a <USART2_IRQHandler+0x52>
    uint32_t head_temp = rx_rbuff.head + 1;
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <USART2_IRQHandler+0xb0>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	3301      	adds	r3, #1
 800072e:	607b      	str	r3, [r7, #4]
    if (head_temp == RX_BUFF_SIZE) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b14      	cmp	r3, #20
 8000734:	d101      	bne.n	800073a <USART2_IRQHandler+0x22>
      head_temp = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
    }

    if(head_temp == rx_rbuff.tail) {
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <USART2_IRQHandler+0xb0>)
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	d106      	bne.n	8000752 <USART2_IRQHandler+0x3a>
      //buffor pelny

      USART2->ISR &= ~USART_ISR_RXNE;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <USART2_IRQHandler+0xac>)
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <USART2_IRQHandler+0xac>)
 8000748:	69d2      	ldr	r2, [r2, #28]
 800074a:	2120      	movs	r1, #32
 800074c:	438a      	bics	r2, r1
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	e008      	b.n	8000764 <USART2_IRQHandler+0x4c>
    }else {
	rx_rbuff.buffer[head_temp] = USART2->RDR;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <USART2_IRQHandler+0xb0>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <USART2_IRQHandler+0xac>)
 800075c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800075e:	b292      	uxth	r2, r2
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	701a      	strb	r2, [r3, #0]


    }
    rx_rbuff.head = head_temp;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <USART2_IRQHandler+0xb0>)
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	605a      	str	r2, [r3, #4]
  }


  /* nadawanie */
  if (USART2->ISR & USART_ISR_TXE) {
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <USART2_IRQHandler+0xac>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	4013      	ands	r3, r2
 8000772:	d022      	beq.n	80007ba <USART2_IRQHandler+0xa2>
      uint32_t tail_temp = tx_rbuff.tail;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <USART2_IRQHandler+0xb4>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	603b      	str	r3, [r7, #0]
      //bufor pusty, wylacz przerwanie
      if (tx_rbuff.head == tail_temp ) {
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <USART2_IRQHandler+0xb4>)
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d106      	bne.n	8000792 <USART2_IRQHandler+0x7a>
	USART2->CR1 &= ~USART_CR1_TXEIE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <USART2_IRQHandler+0xac>)
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <USART2_IRQHandler+0xac>)
 8000788:	6812      	ldr	r2, [r2, #0]
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	438a      	bics	r2, r1
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e010      	b.n	80007b4 <USART2_IRQHandler+0x9c>
      }else {
	tail_temp++;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	603b      	str	r3, [r7, #0]
	if(tail_temp == TX_BUFF_SIZE) {
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b14      	cmp	r3, #20
 800079c:	d101      	bne.n	80007a2 <USART2_IRQHandler+0x8a>
	  tail_temp = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
	}
	USART2->TDR = tx_rbuff.buffer[tail_temp];
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <USART2_IRQHandler+0xac>)
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <USART2_IRQHandler+0xb4>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	18d3      	adds	r3, r2, r3
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	850b      	strh	r3, [r1, #40]	; 0x28

      }
      tx_rbuff.tail = tail_temp;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <USART2_IRQHandler+0xb4>)
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	609a      	str	r2, [r3, #8]
  }
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40004400 	.word	0x40004400
 80007c8:	20000000 	.word	0x20000000
 80007cc:	2000000c 	.word	0x2000000c

080007d0 <app_init>:

static struct lcd_port_init LCD_KS4X20;

void
app_init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  GPIOA->MODER |= GPIO_MODER_MODER5_0;
 80007d4:	2390      	movs	r3, #144	; 0x90
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	2290      	movs	r2, #144	; 0x90
 80007da:	05d2      	lsls	r2, r2, #23
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	00c9      	lsls	r1, r1, #3
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
  GPIOA->ODR |= GPIO_ODR_5;
 80007e6:	2390      	movs	r3, #144	; 0x90
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	2290      	movs	r2, #144	; 0x90
 80007ec:	05d2      	lsls	r2, r2, #23
 80007ee:	6952      	ldr	r2, [r2, #20]
 80007f0:	2120      	movs	r1, #32
 80007f2:	430a      	orrs	r2, r1
 80007f4:	615a      	str	r2, [r3, #20]

  init_timers();
 80007f6:	f000 f989 	bl	8000b0c <init_timers>

  system_delay_ms(50);
 80007fa:	2032      	movs	r0, #50	; 0x32
 80007fc:	f000 f992 	bl	8000b24 <system_delay_ms>

  LCD_KS4X20.E_PORT = GPIOC;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <app_init+0xa8>)
 8000802:	4a1e      	ldr	r2, [pc, #120]	; (800087c <app_init+0xac>)
 8000804:	605a      	str	r2, [r3, #4]
  LCD_KS4X20.LCD_PIN.E = 11;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <app_init+0xa8>)
 8000808:	220b      	movs	r2, #11
 800080a:	61da      	str	r2, [r3, #28]
  LCD_KS4X20.RS_PORT = GPIOC;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <app_init+0xa8>)
 800080e:	4a1b      	ldr	r2, [pc, #108]	; (800087c <app_init+0xac>)
 8000810:	601a      	str	r2, [r3, #0]
  LCD_KS4X20.LCD_PIN.RS = 10;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <app_init+0xa8>)
 8000814:	220a      	movs	r2, #10
 8000816:	619a      	str	r2, [r3, #24]

  LCD_KS4X20.DB7_PORT = GPIOA;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <app_init+0xa8>)
 800081a:	2290      	movs	r2, #144	; 0x90
 800081c:	05d2      	lsls	r2, r2, #23
 800081e:	609a      	str	r2, [r3, #8]
  LCD_KS4X20.DB6_PORT = GPIOA;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <app_init+0xa8>)
 8000822:	2290      	movs	r2, #144	; 0x90
 8000824:	05d2      	lsls	r2, r2, #23
 8000826:	60da      	str	r2, [r3, #12]
  LCD_KS4X20.DB5_PORT = GPIOA;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <app_init+0xa8>)
 800082a:	2290      	movs	r2, #144	; 0x90
 800082c:	05d2      	lsls	r2, r2, #23
 800082e:	611a      	str	r2, [r3, #16]
  LCD_KS4X20.DB4_PORT = GPIOA;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <app_init+0xa8>)
 8000832:	2290      	movs	r2, #144	; 0x90
 8000834:	05d2      	lsls	r2, r2, #23
 8000836:	615a      	str	r2, [r3, #20]

  LCD_KS4X20.LCD_PIN.DB7 = 12;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <app_init+0xa8>)
 800083a:	220c      	movs	r2, #12
 800083c:	621a      	str	r2, [r3, #32]
  LCD_KS4X20.LCD_PIN.DB6 = 11;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <app_init+0xa8>)
 8000840:	220b      	movs	r2, #11
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  LCD_KS4X20.LCD_PIN.DB5 = 10;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <app_init+0xa8>)
 8000846:	220a      	movs	r2, #10
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  LCD_KS4X20.LCD_PIN.DB4 = 9;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <app_init+0xa8>)
 800084c:	2209      	movs	r2, #9
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c

  lcd_init(&LCD_KS4X20);
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <app_init+0xa8>)
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fdaa 	bl	80003ac <lcd_init>

  lcd_goto(&LCD_KS4X20, 1,0);
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <app_init+0xa8>)
 800085a:	2200      	movs	r2, #0
 800085c:	2101      	movs	r1, #1
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff feaa 	bl	80005b8 <lcd_goto>
  lcd_show_text(&LCD_KS4X20, "Hello");
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <app_init+0xb0>)
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <app_init+0xa8>)
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff feed 	bl	800064a <lcd_show_text>

}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	2000003c 	.word	0x2000003c
 800087c:	48000800 	.word	0x48000800
 8000880:	08000d14 	.word	0x08000d14

08000884 <TIM7_IRQHandler>:
  TIM7->CNT = 0;
}

void
KP_IRQHANDLER(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  volatile uint32_t * p_cc;
  p_cc = &keypad_scanner.scan_time_ms;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <TIM7_IRQHandler+0x38>)
 800088c:	607b      	str	r3, [r7, #4]
  if(TIM7->SR & TIM_SR_UIF) {
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <TIM7_IRQHandler+0x3c>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	d00c      	beq.n	80008b2 <TIM7_IRQHandler+0x2e>
    TIM7->SR = ~TIM_SR_UIF;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <TIM7_IRQHandler+0x3c>)
 800089a:	2202      	movs	r2, #2
 800089c:	4252      	negs	r2, r2
 800089e:	611a      	str	r2, [r3, #16]
    if(*p_cc > 0) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d004      	beq.n	80008b2 <TIM7_IRQHandler+0x2e>
	*p_cc = *p_cc - 1;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
    }
  }
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	200000a8 	.word	0x200000a8
 80008c0:	40001400 	.word	0x40001400

080008c4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  uint32_t state = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
  {
    switch(state) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d007      	beq.n	80008e4 <main+0x20>
 80008d4:	d20f      	bcs.n	80008f6 <main+0x32>

      case CLK_INIT: {
	setup_sys_flash();
 80008d6:	f000 f957 	bl	8000b88 <setup_sys_flash>
	setup_sys_clocking();
 80008da:	f000 f969 	bl	8000bb0 <setup_sys_clocking>

	state = APP_INIT;
 80008de:	2301      	movs	r3, #1
 80008e0:	607b      	str	r3, [r7, #4]
      }
      break;
 80008e2:	e009      	b.n	80008f8 <main+0x34>

      case APP_INIT: {

	app_init();
 80008e4:	f7ff ff74 	bl	80007d0 <app_init>

	state = APP_HANDLER;
 80008e8:	2302      	movs	r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
	uart2_put_string("APPH\n\r");
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <main+0x38>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fefe 	bl	80006f0 <uart2_put_string>

      }
      break;
 80008f4:	e000      	b.n	80008f8 <main+0x34>

      case APP_HANDLER: {

      }
      break;
 80008f6:	46c0      	nop			; (mov r8, r8)
    switch(state) {
 80008f8:	e7e9      	b.n	80008ce <main+0xa>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	08000d1c 	.word	0x08000d1c

08000900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000904:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000906:	e003      	b.n	8000910 <LoopCopyDataInit>

08000908 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800090a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800090c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800090e:	3104      	adds	r1, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <LoopForever+0xa>)
  ldr r3, =_edata
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <LoopForever+0xe>)
  adds r2, r0, r1
 8000914:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000916:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000918:	d3f6      	bcc.n	8000908 <CopyDataInit>
  ldr r2, =_sbss
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <LoopForever+0x12>)
  b LoopFillZerobss
 800091c:	e002      	b.n	8000924 <LoopFillZerobss>

0800091e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000920:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000922:	3204      	adds	r2, #4

08000924 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <LoopForever+0x16>)
  cmp r2, r3
 8000926:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000928:	d3f9      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800092a:	f000 f813 	bl	8000954 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800092e:	f000 f9c1 	bl	8000cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff ffc7 	bl	80008c4 <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	20004000 	.word	0x20004000
  ldr r3, =_sidata
 800093c:	08000d2c 	.word	0x08000d2c
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000944:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000948:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 800094c:	200000ac 	.word	0x200000ac

08000950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_IRQHandler>
	...

08000954 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <SystemInit+0x7c>)
 800095a:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <SystemInit+0x7c>)
 800095c:	6812      	ldr	r2, [r2, #0]
 800095e:	2101      	movs	r1, #1
 8000960:	430a      	orrs	r2, r1
 8000962:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <SystemInit+0x7c>)
 8000966:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <SystemInit+0x7c>)
 8000968:	6852      	ldr	r2, [r2, #4]
 800096a:	491a      	ldr	r1, [pc, #104]	; (80009d4 <SystemInit+0x80>)
 800096c:	400a      	ands	r2, r1
 800096e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <SystemInit+0x7c>)
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <SystemInit+0x7c>)
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	4918      	ldr	r1, [pc, #96]	; (80009d8 <SystemInit+0x84>)
 8000978:	400a      	ands	r2, r1
 800097a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <SystemInit+0x7c>)
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <SystemInit+0x7c>)
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	4916      	ldr	r1, [pc, #88]	; (80009dc <SystemInit+0x88>)
 8000984:	400a      	ands	r2, r1
 8000986:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <SystemInit+0x7c>)
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <SystemInit+0x7c>)
 800098c:	6852      	ldr	r2, [r2, #4]
 800098e:	4914      	ldr	r1, [pc, #80]	; (80009e0 <SystemInit+0x8c>)
 8000990:	400a      	ands	r2, r1
 8000992:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <SystemInit+0x7c>)
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <SystemInit+0x7c>)
 8000998:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800099a:	210f      	movs	r1, #15
 800099c:	438a      	bics	r2, r1
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <SystemInit+0x7c>)
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <SystemInit+0x7c>)
 80009a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80009a6:	490f      	ldr	r1, [pc, #60]	; (80009e4 <SystemInit+0x90>)
 80009a8:	400a      	ands	r2, r1
 80009aa:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <SystemInit+0x7c>)
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <SystemInit+0x7c>)
 80009b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	430a      	orrs	r2, r1
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SystemInit+0x7c>)
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <SystemInit+0x7c>)
 80009bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80009be:	2101      	movs	r1, #1
 80009c0:	438a      	bics	r2, r1
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <SystemInit+0x7c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]

}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021000 	.word	0x40021000
 80009d4:	08ffb80c 	.word	0x08ffb80c
 80009d8:	fef6ffff 	.word	0xfef6ffff
 80009dc:	fffbffff 	.word	0xfffbffff
 80009e0:	ffc0ffff 	.word	0xffc0ffff
 80009e4:	fffffe6c 	.word	0xfffffe6c

080009e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	0002      	movs	r2, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b7f      	cmp	r3, #127	; 0x7f
 80009fc:	d932      	bls.n	8000a64 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fe:	4c2f      	ldr	r4, [pc, #188]	; (8000abc <NVIC_SetPriority+0xd4>)
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	230f      	movs	r3, #15
 8000a08:	4013      	ands	r3, r2
 8000a0a:	3b08      	subs	r3, #8
 8000a0c:	0899      	lsrs	r1, r3, #2
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <NVIC_SetPriority+0xd4>)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	0018      	movs	r0, r3
 8000a16:	230f      	movs	r3, #15
 8000a18:	4003      	ands	r3, r0
 8000a1a:	3b08      	subs	r3, #8
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3306      	adds	r3, #6
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	3304      	adds	r3, #4
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	1dfa      	adds	r2, r7, #7
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	0010      	movs	r0, r2
 8000a2e:	2203      	movs	r2, #3
 8000a30:	4002      	ands	r2, r0
 8000a32:	00d2      	lsls	r2, r2, #3
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	4090      	lsls	r0, r2
 8000a38:	0002      	movs	r2, r0
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	20ff      	movs	r0, #255	; 0xff
 8000a44:	4018      	ands	r0, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	001d      	movs	r5, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	402b      	ands	r3, r5
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	4098      	lsls	r0, r3
 8000a54:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a56:	431a      	orrs	r2, r3
 8000a58:	1d8b      	adds	r3, r1, #6
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	18e3      	adds	r3, r4, r3
 8000a5e:	3304      	adds	r3, #4
 8000a60:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a62:	e027      	b.n	8000ab4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	4c16      	ldr	r4, [pc, #88]	; (8000ac0 <NVIC_SetPriority+0xd8>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	4914      	ldr	r1, [pc, #80]	; (8000ac0 <NVIC_SetPriority+0xd8>)
 8000a70:	1dfa      	adds	r2, r7, #7
 8000a72:	7812      	ldrb	r2, [r2, #0]
 8000a74:	b252      	sxtb	r2, r2
 8000a76:	0892      	lsrs	r2, r2, #2
 8000a78:	32c0      	adds	r2, #192	; 0xc0
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	5852      	ldr	r2, [r2, r1]
 8000a7e:	1df9      	adds	r1, r7, #7
 8000a80:	7809      	ldrb	r1, [r1, #0]
 8000a82:	0008      	movs	r0, r1
 8000a84:	2103      	movs	r1, #3
 8000a86:	4001      	ands	r1, r0
 8000a88:	00c9      	lsls	r1, r1, #3
 8000a8a:	20ff      	movs	r0, #255	; 0xff
 8000a8c:	4088      	lsls	r0, r1
 8000a8e:	0001      	movs	r1, r0
 8000a90:	43c9      	mvns	r1, r1
 8000a92:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	0192      	lsls	r2, r2, #6
 8000a98:	20ff      	movs	r0, #255	; 0xff
 8000a9a:	4010      	ands	r0, r2
 8000a9c:	1dfa      	adds	r2, r7, #7
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	0015      	movs	r5, r2
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	402a      	ands	r2, r5
 8000aa6:	00d2      	lsls	r2, r2, #3
 8000aa8:	4090      	lsls	r0, r2
 8000aaa:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	430a      	orrs	r2, r1
 8000aae:	33c0      	adds	r3, #192	; 0xc0
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	511a      	str	r2, [r3, r4]
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bdb0      	pop	{r4, r5, r7, pc}
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <SysTick_Config+0x40>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d901      	bls.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e010      	b.n	8000afc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <SysTick_Config+0x44>)
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	3a01      	subs	r2, #1
 8000ae0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ff7d 	bl	80009e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SysTick_Config+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x44>)
 8000af6:	2207      	movs	r2, #7
 8000af8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b002      	add	sp, #8
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	00ffffff 	.word	0x00ffffff
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <init_timers>:

static volatile uint32_t system_tick_ms = 0L;

void
init_timers(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  SysTick_Config( SYSCLOCK / 1000);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <init_timers+0x14>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ffd6 	bl	8000ac4 <SysTick_Config>
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	0000bb80 	.word	0x0000bb80

08000b24 <system_delay_ms>:

void
system_delay_ms (uint16_t delay_ms)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	1dbb      	adds	r3, r7, #6
 8000b2e:	801a      	strh	r2, [r3, #0]
  uint32_t old_tick = get_system_tick_ms();
 8000b30:	f000 f810 	bl	8000b54 <get_system_tick_ms>
 8000b34:	0003      	movs	r3, r0
 8000b36:	60fb      	str	r3, [r7, #12]
  while( delay_ms > get_system_tick_ms() - old_tick);
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	1dbb      	adds	r3, r7, #6
 8000b3c:	881c      	ldrh	r4, [r3, #0]
 8000b3e:	f000 f809 	bl	8000b54 <get_system_tick_ms>
 8000b42:	0002      	movs	r2, r0
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	d8f6      	bhi.n	8000b3a <system_delay_ms+0x16>
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b005      	add	sp, #20
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <get_system_tick_ms>:


uint32_t
get_system_tick_ms(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  uint32_t ticks = system_tick_ms;
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <get_system_tick_ms+0x18>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	607b      	str	r3, [r7, #4]
  return ticks;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	2000006c 	.word	0x2000006c

08000b70 <SysTick_Handler>:


void
SYSTICK_HANDLER(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  system_tick_ms++;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <SysTick_Handler+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <SysTick_Handler+0x14>)
 8000b7c:	601a      	str	r2, [r3, #0]
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000006c 	.word	0x2000006c

08000b88 <setup_sys_flash>:

/* SET 48MHz */

void
setup_sys_flash (void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_PRFTBE;  // enable prefetch
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <setup_sys_flash+0x24>)
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <setup_sys_flash+0x24>)
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	2110      	movs	r1, #16
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_ACR_LATENCY; // Set one wait state for 48MHz main clock
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <setup_sys_flash+0x24>)
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <setup_sys_flash+0x24>)
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40022000 	.word	0x40022000

08000bb0 <setup_sys_clocking>:

int32_t
setup_sys_clocking (void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  int32_t retval = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  __IO uint32_t startup_counter = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]

  RCC->CR |= RCC_CR_HSEON;
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <setup_sys_clocking+0xfc>)
 8000bc0:	4a3a      	ldr	r2, [pc, #232]	; (8000cac <setup_sys_clocking+0xfc>)
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0249      	lsls	r1, r1, #9
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]

  /***** only for F070RB!! *****/
  //RCC->CFGR &= ~(1U<<16U);;//~RCC_CFGR_PLLSRC;
  RCC->CFGR |= (1U<<17U) ;//RCC_CFGR_PLLSRC_HSE_PREDIV;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <setup_sys_clocking+0xfc>)
 8000bce:	4a37      	ldr	r2, [pc, #220]	; (8000cac <setup_sys_clocking+0xfc>)
 8000bd0:	6852      	ldr	r2, [r2, #4]
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	0289      	lsls	r1, r1, #10
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (1U<<16U);
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <setup_sys_clocking+0xfc>)
 8000bdc:	4a33      	ldr	r2, [pc, #204]	; (8000cac <setup_sys_clocking+0xfc>)
 8000bde:	6852      	ldr	r2, [r2, #4]
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	0249      	lsls	r1, r1, #9
 8000be4:	430a      	orrs	r2, r1
 8000be6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 |= RCC_CFGR2_PREDIV_DIV2;
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <setup_sys_clocking+0xfc>)
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <setup_sys_clocking+0xfc>)
 8000bec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000bee:	2101      	movs	r1, #1
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  while (!(RCC->CR & RCC_CR_HSERDY)) { 			// Wait for HSE set-up TODO: Add timeout, return error
 8000bf4:	e01b      	b.n	8000c2e <setup_sys_clocking+0x7e>
    if (startup_counter++ > HSE_STARTUP_TIMEOUT) {
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	603a      	str	r2, [r7, #0]
 8000bfc:	2b64      	cmp	r3, #100	; 0x64
 8000bfe:	d916      	bls.n	8000c2e <setup_sys_clocking+0x7e>
      RCC->CR &= ~RCC_CR_HSEON;
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c02:	4a2a      	ldr	r2, [pc, #168]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	492a      	ldr	r1, [pc, #168]	; (8000cb0 <setup_sys_clocking+0x100>)
 8000c08:	400a      	ands	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
      RCC->CFGR &= ~RCC_CFGR_PLLSRC_HSE_PREDIV | RCC_CFGR_PLLMUL;
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c0e:	4a27      	ldr	r2, [pc, #156]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c10:	6852      	ldr	r2, [r2, #4]
 8000c12:	4927      	ldr	r1, [pc, #156]	; (8000cb0 <setup_sys_clocking+0x100>)
 8000c14:	400a      	ands	r2, r1
 8000c16:	605a      	str	r2, [r3, #4]
      RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_PREDIV | RCC_CFGR_PLLMUL2; // Set PLL_CLK = 48MHz = 8MHz * 6
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c1a:	4a24      	ldr	r2, [pc, #144]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c1c:	6852      	ldr	r2, [r2, #4]
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	0209      	lsls	r1, r1, #8
 8000c22:	430a      	orrs	r2, r1
 8000c24:	605a      	str	r2, [r3, #4]
      retval = -1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	425b      	negs	r3, r3
 8000c2a:	607b      	str	r3, [r7, #4]
      break;
 8000c2c:	e005      	b.n	8000c3a <setup_sys_clocking+0x8a>
  while (!(RCC->CR & RCC_CR_HSERDY)) { 			// Wait for HSE set-up TODO: Add timeout, return error
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	029b      	lsls	r3, r3, #10
 8000c36:	4013      	ands	r3, r2
 8000c38:	d0dd      	beq.n	8000bf6 <setup_sys_clocking+0x46>
    }
  }

  if (retval == 0) {
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d106      	bne.n	8000c4e <setup_sys_clocking+0x9e>
    RCC->CFGR |= RCC_CFGR_PLLMUL8;			// Set PLL_CLK = 48MHz = 8MHz * 6 --- leave double PLLMUL config for more universal use.
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c44:	6852      	ldr	r2, [r2, #4]
 8000c46:	21c0      	movs	r1, #192	; 0xc0
 8000c48:	0349      	lsls	r1, r1, #13
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	605a      	str	r2, [r3, #4]
  }
  RCC->CR |= RCC_CR_PLLON; 				// Start PLL clock
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c50:	4a16      	ldr	r2, [pc, #88]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0449      	lsls	r1, r1, #17
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY));			// Wait for PLL set-up TODO: Add timeout, return error
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	049b      	lsls	r3, r3, #18
 8000c66:	4013      	ands	r3, r2
 8000c68:	d0f9      	beq.n	8000c5e <setup_sys_clocking+0xae>
  RCC->CFGR |= RCC_CFGR_SW_PLL;				// Choose PLL as a main clock source
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c6e:	6852      	ldr	r2, [r2, #4]
 8000c70:	2102      	movs	r1, #2
 8000c72:	430a      	orrs	r2, r1
 8000c74:	605a      	str	r2, [r3, #4]
  while (!(RCC->CFGR & RCC_CFGR_SWS_PLL ));		// Wait for change main clock from HSI to PLL TODO: Add timeout, return error
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d0fa      	beq.n	8000c78 <setup_sys_clocking+0xc8>
//  system_set_apb2_clock_freq(48000000);

  /*
   * Setup RCC regs for enable peripherals.
   */
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c86:	6952      	ldr	r2, [r2, #20]
 8000c88:	21f0      	movs	r1, #240	; 0xf0
 8000c8a:	0349      	lsls	r1, r1, #13
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	615a      	str	r2, [r3, #20]
	      | RCC_AHBENR_GPIOCEN  | RCC_AHBENR_GPIODEN; /* Enable GPIOs and DMA1 */
//  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
//  RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;

  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; /* For exti K inputs*/
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <setup_sys_clocking+0xfc>)
 8000c94:	6992      	ldr	r2, [r2, #24]
 8000c96:	2101      	movs	r1, #1
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	619a      	str	r2, [r3, #24]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9c:	f3bf 8f4f 	dsb	sy
#if defined(DEBUG_ENABLE)
  RCC->APB2ENR |= RCC_APB2ENR_DBGMCUEN;
#endif
  __DSB();

  return retval;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	fffeffff 	.word	0xfffeffff

08000cb4 <__libc_init_array>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4d0c      	ldr	r5, [pc, #48]	; (8000cec <__libc_init_array+0x38>)
 8000cba:	4c0d      	ldr	r4, [pc, #52]	; (8000cf0 <__libc_init_array+0x3c>)
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	10a4      	asrs	r4, r4, #2
 8000cc0:	42a6      	cmp	r6, r4
 8000cc2:	d109      	bne.n	8000cd8 <__libc_init_array+0x24>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	f000 f819 	bl	8000cfc <_init>
 8000cca:	4d0a      	ldr	r5, [pc, #40]	; (8000cf4 <__libc_init_array+0x40>)
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <__libc_init_array+0x44>)
 8000cce:	1b64      	subs	r4, r4, r5
 8000cd0:	10a4      	asrs	r4, r4, #2
 8000cd2:	42a6      	cmp	r6, r4
 8000cd4:	d105      	bne.n	8000ce2 <__libc_init_array+0x2e>
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	00b3      	lsls	r3, r6, #2
 8000cda:	58eb      	ldr	r3, [r5, r3]
 8000cdc:	4798      	blx	r3
 8000cde:	3601      	adds	r6, #1
 8000ce0:	e7ee      	b.n	8000cc0 <__libc_init_array+0xc>
 8000ce2:	00b3      	lsls	r3, r6, #2
 8000ce4:	58eb      	ldr	r3, [r5, r3]
 8000ce6:	4798      	blx	r3
 8000ce8:	3601      	adds	r6, #1
 8000cea:	e7f2      	b.n	8000cd2 <__libc_init_array+0x1e>
 8000cec:	08000d24 	.word	0x08000d24
 8000cf0:	08000d24 	.word	0x08000d24
 8000cf4:	08000d24 	.word	0x08000d24
 8000cf8:	08000d28 	.word	0x08000d28

08000cfc <_init>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d02:	bc08      	pop	{r3}
 8000d04:	469e      	mov	lr, r3
 8000d06:	4770      	bx	lr

08000d08 <_fini>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr
